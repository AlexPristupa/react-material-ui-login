{"version":3,"sources":["components/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","container","display","flexWrap","width","margin","spacing","loginBtn","marginTop","flexGrow","header","textAlign","background","color","card","initialState","username","password","isButtonDisabled","helperText","isError","reducer","state","action","type","payload","Login","classes","useReducer","dispatch","useEffect","trim","handleLogin","handleKeyPress","event","keyCode","which","className","noValidate","autoComplete","Card","CardHeader","title","CardContent","TextField","error","fullWidth","id","label","placeholder","onChange","target","value","onKeyPress","CardActions","Button","variant","size","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07fb8d88.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: 400,\n      margin: `${theme.spacing(0)} auto`\n    },\n    loginBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1\n    },\n    header: {\n      textAlign: 'center',\n      background: '#212121',\n      color: '#fff'\n    },\n    card: {\n      marginTop: theme.spacing(10)\n    }\n  })\n);\n\n//state type\n\ntype State = {\n  username: string\n  password:  string\n  isButtonDisabled: boolean\n  helperText: string\n  isError: boolean\n};\n\nconst initialState:State = {\n  username: '',\n  password: '',\n  isButtonDisabled: true,\n  helperText: '',\n  isError: false\n};\n\ntype Action = { type: 'setUsername', payload: string }\n  | { type: 'setPassword', payload: string }\n  | { type: 'setIsButtonDisabled', payload: boolean }\n  | { type: 'loginSuccess', payload: string }\n  | { type: 'loginFailed', payload: string }\n  | { type: 'setIsError', payload: boolean };\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'setUsername': \n      return {\n        ...state,\n        username: action.payload\n      };\n    case 'setPassword': \n      return {\n        ...state,\n        password: action.payload\n      };\n    case 'setIsButtonDisabled': \n      return {\n        ...state,\n        isButtonDisabled: action.payload\n      };\n    case 'loginSuccess': \n      return {\n        ...state,\n        helperText: action.payload,\n        isError: false\n      };\n    case 'loginFailed': \n      return {\n        ...state,\n        helperText: action.payload,\n        isError: true\n      };\n    case 'setIsError': \n      return {\n        ...state,\n        isError: action.payload\n      };\n  }\n}\n\nconst Login = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    if (state.username.trim() && state.password.trim()) {\n     dispatch({\n       type: 'setIsButtonDisabled',\n       payload: false\n     });\n    } else {\n      dispatch({\n        type: 'setIsButtonDisabled',\n        payload: true\n      });\n    }\n  }, [state.username, state.password]);\n\n  const handleLogin = () => {\n    if (state.username === 'abc@email.com' && state.password === 'password') {\n      dispatch({\n        type: 'loginSuccess',\n        payload: 'Login Successfully'\n      });\n    } else {\n      dispatch({\n        type: 'loginFailed',\n        payload: 'Incorrect username or password'\n      });\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent) => {\n    if (event.keyCode === 13 || event.which === 13) {\n      state.isButtonDisabled || handleLogin();\n    }\n  };\n\n  const handleUsernameChange: React.ChangeEventHandler<HTMLInputElement> =\n    (event) => {\n      dispatch({\n        type: 'setUsername',\n        payload: event.target.value\n      });\n    };\n\n  const handlePasswordChange: React.ChangeEventHandler<HTMLInputElement> =\n    (event) => {\n      dispatch({\n        type: 'setPassword',\n        payload: event.target.value\n      });\n    }\n  return (\n    <form className={classes.container} noValidate autoComplete=\"off\">\n      <Card className={classes.card}>\n        <CardHeader className={classes.header} title=\"Login App\" />\n        <CardContent>\n          <div>\n            <TextField\n              error={state.isError}\n              fullWidth\n              id=\"username\"\n              type=\"email\"\n              label=\"Username\"\n              placeholder=\"Username\"\n              margin=\"normal\"\n              onChange={handleUsernameChange}\n              onKeyPress={handleKeyPress}\n            />\n            <TextField\n              error={state.isError}\n              fullWidth\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"Password\"\n              margin=\"normal\"\n              helperText={state.helperText}\n              onChange={handlePasswordChange}\n              onKeyPress={handleKeyPress}\n            />\n          </div>\n        </CardContent>\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"secondary\"\n            className={classes.loginBtn}\n            onClick={handleLogin}\n            disabled={state.isButtonDisabled}>\n            Login\n          </Button>\n        </CardActions>\n      </Card>\n    </form>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport Login from './components/Login';\n\nconst App: React.FC = () => {\n  return (\n    <Login />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}